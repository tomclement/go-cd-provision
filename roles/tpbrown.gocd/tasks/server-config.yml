# All tasks below have an implied WHEN: GOCD_CONFIGURE.
- name: yum install base packages needed for server config
  sudo: yes
  yum: name={{ item }} state=present
  with_items:
   - libxml2
   - httpd-tools
   - python-httplib2
  when: ansible_pkg_mgr == 'yum'

- name: apt install base packages needed for server config
  sudo: yes
  apt: name={{ item }} state=present
  with_items:
   - libxml2-utils
   - apache2-utils
   - python-httplib2
  when: ansible_pkg_mgr == 'apt'

- name: Validate SMTP from and admin email addresses
  set_fact:
   GOCD_FROM_EMAIL_VALID: "{{ GOCD_SMTP_FROM_ADDR | upper | match(GOCD_VALID_EMAIL_REGEX)}}"
   GOCD_ADMIN_EMAIL_VALID: "{{ GOCD_ADMIN_EMAIL | upper | match(GOCD_VALID_EMAIL_REGEX)}}"
  when: GOCD_CONFIGURE_SMTP

- name: Verify that minimum SMTP configuration variables are defined
  assert:
     that:
        - GOCD_SMTP_HOST is defined
        - GOCD_FROM_EMAIL_VALID
        - GOCD_ADMIN_EMAIL_VALID
  when: GOCD_CONFIGURE_SMTP

- name: If SMTP user specified, password must also be specified
  assert:
     that:
        - GOCD_SMTP_PASSWORD is defined or GOCD_SMTP_ENCRYPTED_PASSWORD is defined
  when: GOCD_CONFIGURE_SMTP and GOCD_SMTP_USER

- name: Verify that minimum LDAP security configuration variables are defined
  assert:
     that:
        - GOCD_LDAP_URL is defined
        - GOCD_LDAP_MANAGER_DN is defined
        - GOCD_LDAP_SEARCH_FILTER is defined
        - GOCD_LDAP_SEARCH_BASE is defined
  when: GOCD_CONFIGURE_SECURITY and (GOCD_LDAP_URL is defined or GOCD_LDAP_MANAGER_DN is defined or GOCD_LDAP_SEARCH_FILTER is defined or GOCD_LDAP_SEARCH_BASE is defined)

# Configuring Go - Optional
- name: retrieving server ID
  command: xmllint --xpath 'string(/cruise/server/@serverId)' /etc/go/cruise-config.xml
  register: tmp_go_server_id
  changed_when: false

- name: Save server ID as a fact
  set_fact:
   GOCD_SERVER_ID: "{{ tmp_go_server_id.stdout }}"

- name: retrieve existing cruise-config.xml
  fetch: dest="/tmp/{{ ansible_hostname }}/" src="/etc/go/cruise-config.xml" flat="yes"
  changed_when: false

- name: Check for existing pipelines
  command: xmllint --xpath 'count(//pipelines)' /etc/go/cruise-config.xml
  register: tmp_go_pipelines_count
  changed_when: false

- name: Check for existing agents
  command: xmllint --xpath 'count(//agents)' /etc/go/cruise-config.xml
  register: tmp_go_agents_count
  changed_when: false

- name: Check for existing templates
  command: xmllint --xpath 'count(//templates)' /etc/go/cruise-config.xml
  register: tmp_go_templates_count
  changed_when: false

- name: Check for existing environments
  command: xmllint --xpath 'count(//environments)' /etc/go/cruise-config.xml
  register: tmp_go_environments_count
  changed_when: false

- name: Save existing pipelines
  command: xmllint --xpath '//pipelines' /etc/go/cruise-config.xml
  register: tmp_go_pipelines_config
  changed_when: false
  when: tmp_go_pipelines_count.stdout != "0"

- name: Save pipelines as a fact
  set_fact:
   GOCD_EXISTING_PIPELINES: "{{ tmp_go_pipelines_config.stdout }}"
  when: tmp_go_pipelines_count.stdout != "0"

- name: Save existing agents
  command: xmllint --xpath '//agents' /etc/go/cruise-config.xml
  register: tmp_go_agents_config
  changed_when: false
  when: tmp_go_agents_count.stdout != "0"

- name: Save agents as a fact
  set_fact:
   GOCD_EXISTING_AGENTS: "{{ tmp_go_agents_config.stdout }}"
  when: tmp_go_agents_count.stdout != "0"

- name: Save existing templates
  command: xmllint --xpath '//templates' /etc/go/cruise-config.xml
  register: tmp_go_templates_config
  changed_when: false
  when: tmp_go_templates_count.stdout != "0"

- name: Save templates as a fact
  set_fact:
   GOCD_EXISTING_TEMPLATES: "{{ tmp_go_templates_config.stdout }}"
  when: tmp_go_templates_count.stdout != "0"

- name: Save existing environments
  command: xmllint --xpath '//environments' /etc/go/cruise-config.xml
  register: tmp_go_environments_config
  changed_when: false
  when: tmp_go_environments_count.stdout != "0"

- name: Save environments as a fact
  set_fact:
   GOCD_EXISTING_ENVIRONMENTS: "{{ tmp_go_environments_config.stdout }}"
  when: tmp_go_environments_count.stdout != "0"

# Doing it here so that the default is only in one place (vs in template and in tasks)
- name: Ensure password file, admin user, and admin passwords all have a default
  set_fact:
   GOCD_PASSWDFILE_PATH: "{{ GOCD_PASSWDFILE_PATH | default('/etc/go/passwd') }}"
   GOCD_DEFAULT_ADMIN: "{{ GOCD_DEFAULT_ADMIN | default('admin') }}"
   GOCD_DEFAULT_PASS: "{{ GOCD_DEFAULT_PASS | default('insecure') }}"
  when: GOCD_PASSWDFILE_PATH is not defined or GOCD_DEFAULT_ADMIN is not defined or GOCD_DEFAULT_PASS is not defined

- name: Checking for password file
  stat: "path={{ GOCD_PASSWDFILE_PATH }} get_md5=no"
  register: tmp_go_passwd

- name: Generating password for default admin user
  command: "htpasswd -sbn {{ GOCD_DEFAULT_ADMIN}} {{ GOCD_DEFAULT_PASS }}"
  register: tmp_passfile_contents
  when: tmp_go_passwd.stat.exists == False

- name: Creating default admin user
  lineinfile: "create=yes dest={{ GOCD_PASSWDFILE_PATH }} line='{{ tmp_passfile_contents.stdout }}' group={{ GOCD_GROUP }} mode=0640 owner={{ GOCD_USER }}"
  when: tmp_go_passwd.stat.exists == False

- name: Wait for Go to start
  wait_for: port=8153 timeout=180

- name: Trigger a Go configuration backup
  uri: url=http://{{ ansible_hostname }}:8153/go/api/admin/start_backup
     method=POST user={{ GOCD_DEFAULT_ADMIN }} password={{ GOCD_DEFAULT_PASS }}

- name: Creating Go configuration file
  template: backup=no dest=/etc/go/cruise-config.xml group={{ GOCD_GROUP }} mode=0644 owner={{ GOCD_USER }} src=base-config.xml
